package oa.dao.table;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import oa.dao.BaseDao;
import oa.model.table.Certification;
import oa.util.ResultList;

@SuppressWarnings("unchecked")
public class CertificationDao extends BaseDao{
	private static final Logger log = LoggerFactory.getLogger(CertificationDao.class);
	// property constants
	public static final String USER_ID = "user_id";		//用户标识
	public static final String Key_id = "key_id";
	public static final String cert = "cert";
	
	protected void initDao() {
		// do nothing
	}

	public void save(Certification instance) {
		log.debug("saving Certification instance");
		try {
			super.save(instance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.debug("save failed", re);
			throw re;
		}
	}
	


	public  void delete(Certification instance) {
		log.debug("deleting Certification instance");
		try {
			super.delete(instance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.debug("delete failed", re);
			throw re;
		}
	
	}
	public  Certification findCertification(String key_id) {
		// TODO Auto-generated method stub
		Certification key=new Certification();
		return (key);
	}

	public  void update(Certification instance) {
		log.debug("update Certification instance");
		try {
			super.update(instance);
			log.debug("update successful");
		} catch (RuntimeException re) {
			log.debug("update failed", re);
			throw re;
		}
	}


	
	/*
	 * 按属性查询返回集合中唯一对象
	 */
	public Certification findByPropertyReturnOnly(String propertyName, String value){
		log.debug("finding Certification instance with property: " + propertyName
				+ ", value: " + value);
		try {
			ResultList<Certification> user=super.find(null,"oa.model.table.Certification", propertyName, value);
			Certification u=user.get(0);
			return u;
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
		
		
	}
	public  Certification findById(String key_id) {
		log.debug("getting usbkey instance with id: " + key_id);
		try {
			Certification keymsg = (Certification)super.get("oa.model.table.Certification", key_id);
			return keymsg;
		} catch (RuntimeException re) {
			log.debug("get failed", re);
			throw re;
		}
	}

	public   ResultList<Certification> findByExample(Integer pageNo, String key_id) {
		log.debug("find Certification instances with example");
		try {
			return super.find( pageNo, "oa.model.table.Certification", key_id);
		} catch (RuntimeException re) {
			log.debug("find all failed", re);
			throw re;
		}
	}

	public ResultList<Certification> findAll(Integer pageNo) {
		log.debug("finding all Certification instances");
		try {
			return super.find(pageNo, "oa.model.table.Certification");
		} catch (RuntimeException re) {
			log.debug("find all failed", re);
			throw re;
		}
	}
	
	public ResultList<Certification> findByCondition(Integer pageNo, String conditions){
		log.debug("finding Certification instance with conditions: " + conditions);
		try {
			return super.find(pageNo, "oa.model.table.Certification", conditions);
		} catch (RuntimeException re) {
			log.debug("find by property user_id failed", re);
			throw re;
		}
	}

	public ResultList<Certification> findByProperty(Integer pageNo, String key_id, String value) {
		log.debug("finding Certification instance with property: " + key_id
				+ ", value: " + value);
		try {
			return super.find(pageNo, "oa.model.table.Certification", key_id, value);
		} catch (RuntimeException re) {
			log.debug("find by key_id failed", re);
			throw re;
		}
	}


}


