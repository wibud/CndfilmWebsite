package oa.dao.table;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import oa.dao.BaseDao;
import oa.model.table.Template;
import oa.util.ResultList;

@SuppressWarnings("unchecked")
public class TemplateDao extends BaseDao {
	private static final Logger log = LoggerFactory.getLogger(TemplateDao.class);
	// property constants
	public static final String TEMPLATE_ID = "template_id";		//标识
	public static final String TEMPLATENAME = "templatename";
	public static final String CREATOR_ID = "creator_id";
	public static final String CREATORNAME = "creatorname";
	public static final String CREATETIME = "createtime";
	public static final String PERFORMANCEINDEX = "performanceindex";
	public static final String MANAGERWEIGHT = "managerweight";
	public static final String SELFWEIGHT = "selfweight";
	public static final String OTHERWEIGHT = "otherweight";
	public static final String DESCRIPTION = "description";
	public static final String STATUS = "status";
	

	protected void initDao() {
		// do nothing
	}

	public void save(Template instance) {
		log.debug("saving Template instance");
		try {
			super.save(instance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.debug("save failed", re);
			throw re;
		}
	}

	public void delete(Template instance) {
		log.debug("deleting Template instance");
		try {
			super.delete(instance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.debug("delete failed", re);
			throw re;
		}
	}

	public void update(Template instance) {
		log.debug("update Template instance");
		try {
			super.update(instance);
			log.debug("update successful");
		} catch (RuntimeException re) {
			log.debug("update failed", re);
			throw re;
		}
	}


	public Template findById(String id) {
		log.debug("getting Template instance with id: " + id);
		try {
			Template instance = (Template) super.get("oa.model.table.Template", id);
			return instance;
		} catch (RuntimeException re) {
			log.debug("get failed", re);
			throw re;
		}
	}

	public ResultList<Template> findByExample(Integer pageNo, Template template) {
		log.debug("find Template instances with example");
		try {
			return super.find(pageNo, "oa.model.table.Template", template);
		} catch (RuntimeException re) {
			log.debug("find all failed", re);
			throw re;
		}
	}

	public ResultList<Template> findAll(Integer pageNo) {
		log.debug("finding all Template instances");
		try {
			return super.find(pageNo, "oa.model.table.Template");
		} catch (RuntimeException re) {
			log.debug("find all failed", re);
			throw re;
		}
	}
	
	public ResultList<Template> findByCondition(Integer pageNo, String conditions){
		log.debug("finding Template instance with conditions: " + conditions);
		try {
			return super.find(pageNo, "oa.model.table.Template", conditions);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
	}

	public ResultList<Template> findByProperty(Integer pageNo, String propertyName, String value) {
		log.debug("finding Template instance with property: " + propertyName
				+ ", value: " + value);
		try {
			return super.find(pageNo, "oa.model.table.Template", propertyName, value);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
	}
	//以一个字段或另一个字段为条件查询
	public ResultList<Template> findByProperty(Integer pageNo,String propertyName1,String propertyName2,String value){
		log.debug("finding Template instance with property: " + propertyName1
				+ ", value: " + value+" or "+propertyName2+", value; "+value);
		try {
			return super.find(pageNo, "oa.model.table.Template", propertyName1, propertyName2,value);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
		
	}
	
}
