<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-autowire="byName">

	<context:annotation-config />

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:oa.properties" />
	</bean>

	<!-- 定义数据源Bean，使用C3P0数据源实现 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 连接数据库的驱动 -->
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<!-- 连接数据库的URL -->
		<property name="jdbcUrl" value="${oa.datasource.jdbcUrl}" />
		<!-- 连接数据库的用户名 -->
		<property name="user" value="${oa.datasource.user}" />
		<!-- 连接数据库的密码 -->
		<property name="password" value="${oa.datasource.password}" />

		<!-- 数据库连接池的初始化连接数 -->
		<property name="initialPoolSize" value="10" />

		<!-- 数据库连接池的最大连接数 -->
		<property name="maxPoolSize" value="100" />

		<!-- 数据库连接池的最小连接数 -->
		<property name="minPoolSize" value="5" />

		<!-- 一次请求的连接数 -->
		<property name="acquireIncrement" value="5" />

		<!-- 数据库连接池的连接的最大空闲时间(秒) -->
		<property name="maxIdleTime" value="1800" />

		<!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间(毫秒) -->
		<property name="checkoutTimeout" value="10000" />

		<!-- 每隔一段时间检查所有连接池中的空闲连接(秒) -->
		<property name="idleConnectionTestPeriod" value="1800" />

		<!-- 获取新连接失败后重复尝试获取的次数 -->
		<property name="acquireRetryAttempts" value="100" />

		<!-- 获取新连接失败后重复尝试间隔时间(毫秒) -->
		<property name="acquireRetryDelay" value="5000" />

	</bean>

	<!-- 定义Hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<!-- 依赖注入数据源，注入上面定义的dataSource -->
		<property name="dataSource" ref="dataSource" />

		<!-- packagesToScan属性用来加载全部映射类 -->
		<property name="packagesToScan">
			<list>
				<value>oa.model.table</value>
			</list>
		</property>

		<!-- 定义Hibernate的SessionFactory的属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLInnoDBDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<!-- hibernate.hbm2ddl.auto属性如果不设置，则hibernate不进行任何检查，可以不设置 -->
				<prop key="hibernate.hbm2ddl.auto">validate</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
	</bean>


	<!-- 配置业务逻辑组件 -->
	<bean id="userManager" class="oa.service.user.impl.UserManagerImpl"></bean>
	<bean id="filmManager" class="oa.service.film.impl.FilmManagerImpl"></bean>
	<bean id="baseInfoManager" class="oa.service.baseInfo.impl.BaseInfoManagerImpl"></bean>
	<bean id="newTrendsManager" class="oa.service.news.impl.NewTrendsManagerImpl"></bean>
	
	<bean id="mailSender11" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.cndfilm.com" />
		<property name="username" value="xycd@cndfilm.com" />
		<property name="password" value="xinying303" />
	</bean>
	<bean id="emailManager" class="oa.service.baseInfo.impl.EmailManagerImpl">
		<property name="mailSender" ref="mailSender11" />
	</bean>

	<!-- 配置DAO组件 -->
	<bean id="systemConfigDao" class="oa.dao.table.SystemConfigDao" />
	<bean id="userDao" class="oa.dao.table.UserDao"></bean>
	<bean id="filmDao" class="oa.dao.table.FilmDao"></bean>
	<bean id="filmTypeDao" class="oa.dao.table.FilmTypeDao"></bean>
	<bean id="baseInfoDao" class="oa.dao.table.BaseInfoDao"></bean>
	<bean id="newTrendsDao" class="oa.dao.table.NewTrendsDao"></bean>
	
	<!-- DAO Template -->
	<bean id="daoTemplate" class="oa.dao.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

</beans>
