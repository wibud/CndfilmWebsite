package oa.dao.table;

import java.util.List;

import oa.dao.BaseDao;
import oa.model.table.ClaimApply;
import oa.util.ResultList;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("unchecked")
public class ClaimApplyDao extends BaseDao{

private static final Logger log = LoggerFactory.getLogger(OvertimeApplyDao.class);
	
	protected void initDao() {
		// do nothing
	}

	public void save(ClaimApply transientInstance) {
		log.debug("saving ClaimApply instance");
		try {
			super.save(transientInstance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}
		
	public void delete(ClaimApply persistentInstance) {
		log.debug("deleting ClaimApply instance");
		try {
			super.delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}
   
	public void update(ClaimApply instance) {
		log.debug("update ClaimApply instance");
		try {
			super.update(instance);
			log.debug("update successful");
		} catch (RuntimeException re) {
			log.debug("update failed", re);
			throw re;
		}
	}

	
	public ClaimApply findById(String id){
		log.debug("finding ClaimApply instance with id: " + id);
		try {
			ClaimApply instance = (ClaimApply)super.get("oa.model.table.ClaimApply", id);
			return instance;
		} catch (RuntimeException re) {
			log.debug("find by username failed", re);
			throw re;
		}
	}
	
	
	public ResultList<ClaimApply> findByExample(Integer pageNo, ClaimApply instance) {
		log.debug("find ClaimApply instances with example");
//		System.out.println(instance);
		try {
			return super.find(pageNo, "oa.model.table.ClaimApply", instance);
		} catch (RuntimeException re) {
			log.debug("find by example failed", re);
			throw re;
		}
	}

	public ResultList<ClaimApply> findByProperty(Integer pageNo, String propertyName, String value) {
		log.debug("finding ClaimApply instance with property: " + propertyName
				+ ", value: " + value);
		try {
			return super.find(pageNo, "oa.model.table.ClaimApply", propertyName, value);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
	}
	
	public ResultList<ClaimApply> findByCondition(Integer pageNo, String conditions){
		log.debug("finding ClaimApply instance with conditions: " + conditions);
		try {
			return super.find(pageNo, "oa.model.table.ClaimApply", conditions);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
	}
	
	public ResultList<ClaimApply> findAll(Integer pageNo) {
		log.debug("finding all ClaimApply instances");
		try {
			return super.find(pageNo, "oa.model.table.ClaimApply");
		} catch (RuntimeException re) {
			log.debug("find all failed", re);
			throw re;
		}
	}
	
	//以一个字段或另一个字段为条件模糊查询
	public ResultList<ClaimApply> findByProperty(Integer pageNo,String propertyName1,String propertyName2,String value){
		log.debug("finding ClaimApply instance with property: " + propertyName1
				+ ", value: " + value+" or "+propertyName2+", value; "+value);
		try {
			return super.likefind(pageNo, "oa.model.table.ClaimApply", propertyName1, propertyName2,value);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
		
	}
	//连表查询
	public List<ClaimApply> findByHQL(Integer pageNo, String hql){
		log.debug("finding ClaimApply instance with hql: " + hql
				);
		try {
			return super.findByHQl(pageNo, hql);
		} catch (RuntimeException re) {
			log.debug("find failed", re);
			throw re;
		}
	}
	
	public String findCount(String hql){
		log.debug("finding ClaimApply instance with hql: " + hql
		);
		try {
			return super.findCount(hql);
		} catch (RuntimeException re) {
			log.debug("find failed", re);
			throw re;
		}
	}
}
