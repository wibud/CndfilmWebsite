package oa.dao.table;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import oa.dao.BaseDao;
import oa.model.table.User;
import oa.util.ResultList;
import java.util.List;
@SuppressWarnings("unchecked")
public class UserDao extends BaseDao {
	private static final Logger log = LoggerFactory.getLogger(UserDao.class);
	// property constants
	public static final String USER_ID="user_id";		   	//用户标识
	public static final String KEY_ID="key_id";		  	//钥匙标识
	public static final String NAME="name";	 	  	//用户名称
	public static final String SEX="sex";		    	//性别
	public static final String POST_ID="post_id";		 	//关联position表中post_id字段
	public static final String DEPT_ID="dept_id";	    	//关联department表中dept_id字段
	public static final String ADDRESS="address";         //用户地址
	public static final String PLACE_INFO="place_info";      //工位信息
	public static final String TELEPHONE="telephone";       //固话
	public static final String MOBILE="mobile";          //手机
	public static final String EMAIL="email";           //邮箱
	public static final String USER_IP="user_ip"; 
	public static final String USER_DESC="user_desc";
    public static final String PASSWORD="password";

	protected void initDao() {
		// do nothing
	}

	public void save(User instance) {
		log.debug("saving User instance");
		try {
			super.save(instance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.debug("save failed", re);
			throw re;
		}
	}
	
	public void saveUserList(List<User> instance) {
		log.debug("saving UserList instance");
		try {
			super.saveList(instance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.debug("save failed", re);
			throw re;
		}
	}

	public void delete(User instance) {
		log.debug("deleting User instance");
		try {
			super.delete(instance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.debug("delete failed", re);
			throw re;
		}
	}

	public void update(User instance) {
		log.debug("update User instance");
		try {
			super.update(instance);
			log.debug("update successful");
		} catch (RuntimeException re) {
			log.debug("update failed", re);
			throw re;
		}
	}


	public User findById(String id) {
		log.debug("getting User instance with id: " + id);
		try {
			User instance = (User) super.get("oa.model.table.User", id);
			return instance;
		} catch (RuntimeException re) {
			log.debug("get failed", re);
			throw re;
		}
	}
	


	public ResultList<User> findByExample(Integer pageNo, User user) {
		log.debug("find User instances with example");
		try {
			return super.find(pageNo, "oa.model.table.User", user);
		} catch (RuntimeException re) {
			log.debug("find all failed", re);
			throw re;
		}
	}

	public ResultList<User> findAll(Integer pageNo) {
		log.debug("finding all User instances");
		try {
			return super.find(pageNo, "oa.model.table.User");
		} catch (RuntimeException re) {
			log.debug("find all failed", re);
			throw re;
		}
	}
	
	public ResultList<User> findByCondition(Integer pageNo, String conditions){
		log.debug("finding User instance with conditions: " + conditions);
		try {
			return super.find(pageNo, "oa.model.table.User", conditions);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
	}

	public ResultList<User> findByProperty(Integer pageNo, String propertyName, String value) {
		log.debug("finding User instance with property: " + propertyName
				+ ", value: " + value);
		try {
			return super.find(pageNo, "oa.model.table.User", propertyName, value);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
	}
	
	
	
	/*
	 * 按属性查询返回集合中唯一对象
	 */
	public User findByPropertyReturnOnly(String propertyName, String value){
		log.debug("finding User instance with property: " + propertyName
				+ ", value: " + value);
		try {
			ResultList<User> user=super.find(null,"oa.model.table.User", propertyName, value);
			User u=user.get(0);
			return u;
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
		
		
	}
	
	
	/**
	 * 按属性查询用户不分页
	 * @param propertyName
	 * @param value
	 * @return
	 */
	public List<User> findByProperty(String propertyName,String value){
		log.debug("finding User instance with property: " + propertyName
				+ ", value: " + value);
		try {
			return super.find("oa.model.table.User", propertyName, value);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
		
	}

}
