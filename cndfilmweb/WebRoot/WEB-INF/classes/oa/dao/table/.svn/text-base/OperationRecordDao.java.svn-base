 package oa.dao.table;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import oa.dao.BaseDao;

import oa.model.table.Certification;
import oa.model.table.OperationRecord;
import oa.model.table.Sys_loginf;
import oa.model.table.User;
import oa.util.ResultList;
@SuppressWarnings("unused")
public class OperationRecordDao extends BaseDao{
	private static final Logger log = LoggerFactory.getLogger(OperationRecordDao.class);
	public static final String OPERATIONTIME="operationtime";
	public static final String OPERATIONPERSON="operationperson";
	public static final String OPERATIONPERSONID="operationperson_id";
	public static final String OPERATIONACTION="operationaction";
	public static final String OPERATIONDESC="operation_desc";
	
	protected void initDao() {
		// do nothing
	}
	public void save(OperationRecord instance) {
		log.debug("saving Certification instance");
		try {
			super.save(instance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.debug("save failed", re);
			throw re;
		}
	}
	


	public  void delete(OperationRecord instance) {
		log.debug("deleting OperationRecord instance");
		try {
			super.delete(instance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.debug("delete failed", re);
			throw re;
		}
	
	}
	public  OperationRecord findOperationRecord(String operationtime) {
		// TODO Auto-generated method stub
		OperationRecord key=new OperationRecord();
		return (key);
	}

	public  void update(OperationRecord instance) {
		log.debug("update OperationRecord instance");
		try {
			super.update(instance);
			log.debug("update successful");
		} catch (RuntimeException re) {
			log.debug("update failed", re);
			throw re;
		}
	}


	
	/*
	 * 按属性查询返回集合中唯一对象
	 */
	@SuppressWarnings("unchecked")
	public OperationRecord findByPropertyReturnOnly(String propertyName, String value){
		log.debug("finding Certification instance with property: " + propertyName
				+ ", value: " + value);
		try {
			ResultList<OperationRecord> user=super.find(null,"oa.model.table.OperationRecord", propertyName, value);
			OperationRecord u=user.get(0);
			return u;
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
		
		
	}

	public  OperationRecord findById(String operationtime) {
		log.debug("getting usbkey instance with id: " + operationtime);
		try {
			OperationRecord keymsg = (OperationRecord)super.get("oa.model.table.OperationRecord", operationtime);
			return keymsg;
		} catch (RuntimeException re) {
			log.debug("get failed", re);
			throw re;
		}
	}

	@SuppressWarnings("unchecked")
	public   ResultList<OperationRecord> findByExample(Integer pageNo, OperationRecord user) {
		log.debug("find OperationRecord instances with example");
		try {
			return super.find( pageNo, "oa.model.table.OperationRecord", user);
		} catch (RuntimeException re) {
			log.debug("find all failed", re);
			throw re;
		}
	}

	@SuppressWarnings("unchecked")
	public ResultList<OperationRecord> findAll(Integer pageNo) {
		log.debug("finding all OperationRecord instances");
		try {
			return super.find(pageNo, "oa.model.table.OperationRecord");
		} catch (RuntimeException re) {
			log.debug("find all failed", re);
			throw re;
		}
	}
	

	@SuppressWarnings("unchecked")
	public ResultList<OperationRecord> findByCondition(Integer pageNo, String conditions){
		log.debug("finding OperationRecord instance with conditions: " + conditions);
		try {
			return super.find(pageNo, "oa.model.table.OperationRecord", conditions);
		} catch (RuntimeException re) {
			log.debug("find by property user_id failed", re);
			throw re;
		}
	}

	
	@SuppressWarnings("unchecked")
	public ResultList<OperationRecord> findByProperty(Integer pageNo, String propertyName, String value) {
		log.debug("finding Sys_loginf instance with property: " + propertyName
				+ ", value: " + value);
		try {
			return super.find(pageNo, "oa.model.table.OperationRecord", propertyName, value);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
	}
}
