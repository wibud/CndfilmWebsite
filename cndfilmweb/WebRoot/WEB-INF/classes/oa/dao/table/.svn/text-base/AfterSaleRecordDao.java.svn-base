package oa.dao.table;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import oa.dao.BaseDao;
import oa.model.table.AfterSaleRecord;
import oa.util.ResultList;

@SuppressWarnings("unchecked")
public class AfterSaleRecordDao extends BaseDao {
	private static final Logger log = LoggerFactory.getLogger(AfterSaleRecordDao.class);
	// property constants
	public static final String RECORD_ID = "record_id";		//售后服务记录标识
	public static final String FEEDBACKPEOPLE = "feedbackpeople";
	public static final String CUSTOMERNAME = "customername";
	public static final String CUSTOMERTEL = "customertel";
	public static final String CUSTOMERUNIT = "customerunit";
	public static final String CUSTOMERTYPE = "customertype";
	public static final String DESCRIPTION = "description";
	public static final String TRACKPEOPLE = "trackpeople";
	public static final String CURRENTDEALER = "currentdealer";
	public static final String RESULT = "result";
	public static final String REPORTTIME = "reporttime";
	public static final String SOLVETIME = "solvetime";


	protected void initDao() {
		// do nothing
	}

	public void save(AfterSaleRecord instance) {
		log.debug("saving AfterSaleRecord instance");
		try {
			super.save(instance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.debug("save failed", re);
			throw re;
		}
	}

	public void delete(AfterSaleRecord instance) {
		log.debug("deleting AfterSaleRecord instance");
		try {
			super.delete(instance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.debug("delete failed", re);
			throw re;
		}
	}

	public void update(AfterSaleRecord instance) {
		log.debug("update AfterSaleRecord instance");
		try {
			super.update(instance);
			log.debug("update successful");
		} catch (RuntimeException re) {
			log.debug("update failed", re);
			throw re;
		}
	}


	public AfterSaleRecord findById(String id) {
		log.debug("getting AfterSaleRecord instance with id: " + id);
		try {
			AfterSaleRecord instance = (AfterSaleRecord) super.get("oa.model.table.AfterSaleRecord", id);
			return instance;
		} catch (RuntimeException re) {
			log.debug("get failed", re);
			throw re;
		}
	}

	public ResultList<AfterSaleRecord> findByExample(Integer pageNo, AfterSaleRecord afterSaleRecord) {
		log.debug("find AfterSaleRecord instances with example");
		try {
			return super.find(pageNo, "oa.model.table.AfterSaleRecord", afterSaleRecord);
		} catch (RuntimeException re) {
			log.debug("find all failed", re);
			throw re;
		}
	}

	public ResultList<AfterSaleRecord> findAll(Integer pageNo) {
		log.debug("finding all AfterSaleRecord instances");
		try {
			return super.find(pageNo, "oa.model.table.AfterSaleRecord");
		} catch (RuntimeException re) {
			log.debug("find all failed", re);
			throw re;
		}
	}
	
	public ResultList<AfterSaleRecord> findByCondition(Integer pageNo, String conditions){
		log.debug("finding AfterSaleRecord instance with conditions: " + conditions);
		try {
			return super.find(pageNo, "oa.model.table.AfterSaleRecord", conditions);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
	}

	public ResultList<AfterSaleRecord> findByProperty(Integer pageNo, String propertyName, String value) {
		log.debug("finding AfterSaleRecord instance with property: " + propertyName
				+ ", value: " + value);
		try {
			return super.find(pageNo, "oa.model.table.AfterSaleRecord", propertyName, value);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
	}
	//以一个字段或另一个字段为条件查询
	public ResultList<AfterSaleRecord> findByProperty(Integer pageNo,String propertyName1,String propertyName2,String value){
		log.debug("finding AfterSaleRecord instance with property: " + propertyName1
				+ ", value: " + value+" or "+propertyName2+", value; "+value);
		try {
			return super.find(pageNo, "oa.model.table.AfterSaleRecord", propertyName1, propertyName2,value);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
		
	}
	

}
