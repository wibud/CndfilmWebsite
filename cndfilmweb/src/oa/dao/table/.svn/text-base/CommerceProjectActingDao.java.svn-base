package oa.dao.table;

import oa.dao.BaseDao;

import oa.model.table.CommerceProjectActing;
import oa.util.ResultList;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CommerceProjectActingDao extends BaseDao {
	private static final Logger log = LoggerFactory
			.getLogger(CertificationDao.class);

	public final String COMMERCEPROJECT_ID = "commerceproject_id";
	public final String COMMERCEPROJECT_NAME = "commerceproject_name";

	public final String COMMERCEPRODUCT_TYPE = "commerceproduct_type";
	public final String CLIENTFACTORY = "clientfactory";
	public final String CLIENTPERSON = "clientperson";
	public final String CLIENTTEL = "clientTel";
	public final String AUTHNUMBER = "Authnumber";
	public final String SENDPRODUCTTYPE = "sendproductType";
	public final String SOFTWAREVESSION = "softwareVession";
	public final String PRODUCT_ID = "product_id";

	public final String COMMERCEPROJECTACTOR = "commerceprojectactor";
	public final String COMMERCEPROJECTACTOR_ID = "commerceprojectactor_id";

	public final String COMMERCEPTOJECTAUTHSTATE = "commerceprojectAuthstate";

	public final String REMARK = "remark";

	protected void initDao() {
		// do nothing
	}

	public void save(CommerceProjectActing instance) {
		log.debug("saving CommerceProjectActing instance");
		try {
			super.save(instance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.debug("save failed", re);
			throw re;
		}
	}

	public void delete(CommerceProjectActing instance) {
		log.debug("deleting CommerceProjectActing instance");
		try {
			super.delete(instance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.debug("delete failed", re);
			throw re;
		}

	}

	public CommerceProjectActing findCommerceProjectActing(
			String commerceproject_id) {
		// TODO Auto-generated method stub
		CommerceProjectActing key = new CommerceProjectActing();
		return (key);
	}

	public void update(CommerceProjectActing instance) {
		log.debug("update CommerceProjectActing instance");
		try {
			super.update(instance);
			log.debug("update successful");
		} catch (RuntimeException re) {
			log.debug("update failed", re);
			throw re;
		}
	}

	/*
	 * 按属性查询返回集合中唯一对象
	 */
	@SuppressWarnings("unchecked")
	public CommerceProjectActing findByPropertyReturnOnly(String propertyName,
			String value) {
		log.debug("finding CommerceProjectActing instance with property: "
				+ propertyName + ", value: " + value);
		try {
			ResultList<CommerceProjectActing> user = super
					.find(null, "oa.model.table.CommerceProjectActing",
							propertyName, value);
			CommerceProjectActing u = user.get(0);
			return u;
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}

	}

	public CommerceProjectActing findById(String commerceproject_id) {
		log.debug("getting CommerceProject instance with id: "
				+ commerceproject_id);
		try {
			CommerceProjectActing keymsg = (CommerceProjectActing) super.get(
					"oa.model.table.CommerceProjectActing", commerceproject_id);
			return keymsg;
		} catch (RuntimeException re) {
			log.debug("get failed", re);
			throw re;
		}
	}

	@SuppressWarnings("unchecked")
	public ResultList<CommerceProjectActing> findByExample(Integer pageNo,
			CommerceProjectActing commerceProjectActing) {
		log.debug("find CommerceProjectActing instances with example");
		try {
			return super.find(pageNo, "oa.model.table.CommerceProjectActingt",
					commerceProjectActing);
		} catch (RuntimeException re) {
			log.debug("find all failed", re);
			throw re;
		}
	}

	@SuppressWarnings("unchecked")
	public ResultList<CommerceProjectActing> findAll(Integer pageNo) {
		log.debug("finding all CommerceProjectActing instances");
		try {
			return super.find(pageNo, "oa.model.table.CommerceProjectActing");
		} catch (RuntimeException re) {
			log.debug("find all failed", re);
			throw re;
		}
	}

	@SuppressWarnings("unchecked")
	public ResultList<CommerceProjectActing> findByCondition(Integer pageNo,
			String conditions) {
		log.debug("finding CommerceProjectActing instance with conditions: "
				+ conditions);
		try {
			return super.find(pageNo, "oa.model.table.CommerceProjectActing",
					conditions);
		} catch (RuntimeException re) {
			log.debug("find by property conditions failed", re);
			throw re;
		}
	}

	@SuppressWarnings("unchecked")
	public ResultList<CommerceProjectActing> findByProperty(Integer pageNo,
			String propertyName, String value) {
		log.debug("finding CommerceProjectActing instance with property: "
				+ propertyName + ", value: " + value);
		try {
			return super.find(pageNo, "oa.model.table.CommerceProjectActing",
					propertyName, value);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}
	}

	// 以一个字段或另一个字段为条件模糊查询
	@SuppressWarnings("unchecked")
	public ResultList<CommerceProjectActing> findByProperty(Integer pageNo,
			String propertyName1, String propertyName2, String value) {
		log.debug("finding CommerceProjectActing instance with property: "
				+ propertyName1 + ", value: " + value + " or " + propertyName2
				+ ", value; " + value);
		try {
			return super.likefind(pageNo,
					"oa.model.table.CommerceProjectActing", propertyName1,
					propertyName2, value);
		} catch (RuntimeException re) {
			log.debug("find by property name failed", re);
			throw re;
		}

	}
}
